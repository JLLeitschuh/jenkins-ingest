import org.gradle.util.GradleVersion

/**
    Do not make changes to this file directly in Jenkins, just push changes to
    github. The Seed job will always update the file on Jenkins based on the current
    version of this file in the rep.
 */
initscript {

    repositories {
        mavenLocal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2" }
    }

    // Add moderne plugin to classpath of this init script.
    dependencies {
        classpath("io.moderne:moderne-gradle-plugin:latest.integration")
    }

    // If this is the top level project and the gradle version is less than 6, the gradle enterprise
    // plugin must be added to the initscript's classpath. After version 6, the dependencies can be added
    // to the settings buildscript instead.
    def isTopLevelBuild = gradle.getParent() == null
    if (isTopLevelBuild) {
        def gradleVersion = GradleVersion.current().baseVersion
        if (gradleVersion < GradleVersion.version("5.0")) {
            // Versions less than 5 use the older build-scan-plugin
            dependencies {
                classpath("com.gradle:build-scan-plugin:1.16")
            }
        } else if(gradleVersion >= GradleVersion.version("5.0") && gradleVersion < GradleVersion.version("6.0")) {
            // Version 5 uses the newer gradle-enterprise-gradle-plugin. 
            dependencies {
                classpath("com.gradle:gradle-enterprise-gradle-plugin:3.10.2")
            }
        }
    }
}

// Enable build cache, only available for Gradle 3.5+, so invoked defensively
startParameter.metaClass.getMetaProperty("buildCacheEnabled")?.setProperty(startParameter, true)

settingsEvaluated { settings ->
    settings.pluginManagement {
        repositories {
            mavenLocal()
            maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
            mavenCentral()
            maven { url "https://plugins.gradle.org/m2" }
        }
    }
}

def isTopLevelBuild = gradle.getParent() == null

//Setup Gradle Enterprise plugin if this is the top level project
if (isTopLevelBuild) {

    def gradleVersion = org.gradle.util.GradleVersion.current().baseVersion

    if (gradleVersion >= GradleVersion.version("6.0")) {
        //Versions 6 and greater, the plugins is added via settings, set the classpath and add the plugin
        beforeSettings { settings ->
            settings.buildscript.repositories { gradlePluginPortal() }
            settings.buildscript.dependencies.classpath("com.gradle:gradle-enterprise-gradle-plugin:3.10.2")
        }
        settingsEvaluated { settings ->
            if (isTopLevelBuild) {
                //Add gradle enterprise plugin if this is the top level project and it is not already defined on the plugin.
                if (!settings.pluginManager.hasPlugin("com.gradle.enterprise")) {
                    settings.pluginManager.apply("com.gradle.enterprise")
                }
                configureExtension(settings.extensions["gradleEnterprise"])
            }
        }
    } else if (gradleVersion >= GradleVersion.version("5.0")) {
        //Version 5 uses the newer plugin but is added but through the rootProject.
        rootProject {
            pluginManager.apply(com.gradle.scan.plugin.BuildScanPlugin)
            configureExtension(extensions["gradleEnterprise"])
        }
    } else {
        //Versions less than 5 use the build scan plugin.
        rootProject {
            pluginManager.apply(com.gradle.scan.plugin.BuildScanPlugin)
            configureExtension(extensions["com.gradle.build-scan"])
        }
    }
}

allprojects {

    def unwantedTasks = ['javadoc', 'findbugs', 'sonarqube']

    project.tasks.all { task ->
        if (unwantedTasks.contains(task.name) || task.name.startsWith('checkstyle')) {
            task.enabled = false
        }
    }

    project.afterEvaluate {
        if (!project.plugins.hasPlugin(io.moderne.gradle.ModernePlugin)) {
            project.plugins.apply(io.moderne.gradle.ModernePlugin)

            if (!project.plugins.hasPlugin('maven-publish')) {
                project.plugins.apply('maven-publish')
            }
            
            if(project.group == null || project.group.isBlank()) {
                // For publishing to succeed a groupId must be set
                project.group = "io.moderne.unknown"
            }
            // Plugin must be able to resolve its dependencies
            project.repositories {
                mavenLocal()
                maven {
                    url = uri("https://oss.sonatype.org/content/repositories/snapshots")
                }
                mavenCentral()
            }
            project.publishing {
                publishing {
                    publications {
                        create("moderne", MavenPublication.class) {
                            artifact(tasks.getByName("moderneJar"))
                        }
                    }
                }
                repositories {
                    maven {
                        url = 'https://artifactory.moderne.ninja/artifactory/moderne-public-ast/'
                        allowInsecureProtocol(true)
                        credentials {
                            username = System.getenv("ARTIFACTORY_USER")
                            password = System.getenv("ARTIFACTORY_PASSWORD")
                        }
                    }
                }
            }
        }
    }
}

void configureExtension(extension) {
    extension.with {
        server = "https://ge.openrewrite.org/"
        buildScan {
            termsOfServiceUrl "https://gradle.com/terms-of-service"
            termsOfServiceAgree "yes"
            uploadInBackground = false
            publishAlways()
        }
    }
}