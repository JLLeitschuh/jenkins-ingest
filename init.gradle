/**
    Do not make changes to this file directly in Jenkins, just push changes to
    github. The Seed job will always update the file on Jenkins based on the current
    version of this file in the rep.
 */
initscript {

    def isTopLevelBuild = gradle.getParent() == null
    if (isTopLevelBuild) {
        def majorGradleVersion
        try {
            majorGradleVersion = Integer.parseInt(gradleVersion.split("\\.")[0])
        } catch (any) {
            majorGradleVersion = 0
        }

        repositories {
            mavenLocal()
            maven {
                url = uri("https://oss.sonatype.org/content/repositories/snapshots")
            }
            mavenCentral()
        }
        if (majorGradleVersion >= 5) {
            repositories {
                gradlePluginPortal()
            }
        } else if (majorGradleVersion >= 2) {
            repositories {
                maven { url "https://plugins.gradle.org/m2" }
            }
        }
    }
    dependencies {
        classpath("io.moderne:moderne-gradle-plugin:latest.integration")
    }
}

// Enable build cache, only available for Gradle 3.5+, so invoked defensively
startParameter.metaClass.getMetaProperty("buildCacheEnabled")?.setProperty(startParameter, true)

def majorGradleVersion
try {
    majorGradleVersion = Integer.parseInt(gradleVersion.split("\\.")[0])
} catch (any) {
    majorGradleVersion = 0
}
settingsEvaluated { settings ->
    settings.pluginManagement {
        repositories {
            mavenLocal()
            maven {
                url = uri("https://oss.sonatype.org/content/repositories/snapshots")
            }
            mavenCentral()
            repositories {
                maven { url "https://plugins.gradle.org/m2" }
            }
        }
    }
}
allprojects {
    project.afterEvaluate {
        if (!project.plugins.hasPlugin(io.moderne.gradle.ModernePlugin)) {
            project.plugins.apply(io.moderne.gradle.ModernePlugin)

            if (!project.plugins.hasPlugin('maven-publish')) {
                project.plugins.apply('maven-publish')
            }
            
            if(project.group == null || project.group.isBlank()) {
                // For publishing to succeed a groupId must be set
                project.group = "io.moderne.unknown"
            }
            // Plugin must be able to resolve its dependencies
            project.repositories {
                mavenLocal()
                maven {
                    url = uri("https://oss.sonatype.org/content/repositories/snapshots")
                }
                mavenCentral()
            }
            project.publishing {
                publishing {
                    publications {
                        create("moderne", MavenPublication.class) {
                            artifact(tasks.named("moderneJar"))
                        }
                    }
                }
                repositories {
                    maven {
                        url = 'https://artifactory.moderne.ninja/artifactory/moderne-public-ast/'
                        allowInsecureProtocol(true)
                        credentials {
                            username = System.getenv("ARTIFACTORY_USER")
                            password = System.getenv("ARTIFACTORY_PASSWORD")
                        }
                    }
                }
            }
        }
    }
}

